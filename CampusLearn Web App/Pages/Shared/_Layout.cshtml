<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - CampusLearn_Web_App</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/CampusLearn_Web_App.styles.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-page="/Index">CampusLearn_Web_App</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-page="/Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-page="/Privacy">Privacy</a>
                        </li>
                        <!-- Notification Dropdown -->
                        <li class="nav-item dropdown ms-auto">
                            <a class="nav-link position-relative p-1" href="#" role="button" id="notificationDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-bell fs-4 text-warning"></i>
                                <span id="notificationBadge" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="display: none;">
                                    0
                                </span>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 350px;" aria-labelledby="notificationDropdown">
                                <li>
                                    <div class="dropdown-header d-flex justify-content-between align-items-center">
                                        <span>Notifications</span>
                                        <button class="btn btn-sm btn-outline-primary" id="markAllReadBtn">Mark All Read</button>
                                    </div>
                                </li>
                                <li id="notificationList">
                                    <div class="text-center p-3">
                                        <div class="spinner-border spinner-border-sm" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </div>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    
    @* CampusLearn User Session Information for Console Logging *@
    <script>
        // Expose user session data to browser console
        window.campusLearnUser = @Html.Raw(Json.Serialize(new {
            isAuthenticated = Context.Session.GetString("UserId") != null,
            userId = Context.Session.GetString("UserId"),
            email = Context.Session.GetString("UserEmail"),
            role = Context.Session.GetString("UserRole"),
            firstName = Context.Session.GetString("UserFirstName"),
            lastName = Context.Session.GetString("UserLastName")
        }));
        
        // Log current page and user status
        console.log("🎓 CampusLearn: Page rendered with user data");
        console.log("👤 CampusLearn: Current user session:", window.campusLearnUser);
        
        // Database connection status from server
        window.campusLearnConfig = {
            databaseConnected: true,
            domainValidation: "@belgiumcampus.ac.za",
            environment: "@(System.Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Development")"
        };
        
        console.log("⚙️ CampusLearn: Application config:", window.campusLearnConfig);
    </script>
    
    <!-- Notification JavaScript -->
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        if (window.campusLearnUser && window.campusLearnUser.isAuthenticated) {
            loadNotifications();
            loadUnreadCount();

            document.getElementById('notificationDropdown')?.addEventListener('click', function() {
                loadNotifications();
            });

            document.getElementById('markAllReadBtn')?.addEventListener('click', function() {
                markAllRead();
            });

            setInterval(loadUnreadCount, 30000);
        }
    });

    async function loadNotifications() {
        try {
            const response = await fetch('/api/notifications');
            if (!response.ok) return;
            
            const notifications = await response.json();
            
            const notificationList = document.getElementById('notificationList');
            if (notifications.length === 0) {
                notificationList.innerHTML = '<li><div class="dropdown-item text-center py-3 text-muted">No notifications</div></li>';
                return;
            }

            notificationList.innerHTML = notifications.map(notif => `
                <li>
                    <a class="dropdown-item ${notif.isRead ? '' : 'fw-bold'}" href="#" data-notification-id="${notif.notificationID}">
                        <div class="d-flex w-100 justify-content-between">
                            <span>${notif.message}</span>
                            <small class="text-muted">${new Date(notif.createdAt).toLocaleString()}</small>
                        </div>
                    </a>
                </li>
            `).join('');

            document.querySelectorAll('[data-notification-id]').forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    markNotificationRead(this.dataset.notificationId);
                });
            });
        } catch (error) {
            console.error('Error loading notifications:', error);
        }
    }

    async function loadUnreadCount() {
        try {
            const response = await fetch('/api/notifications/unread-count');
            if (!response.ok) return;
            
            const data = await response.json();
            
            const badge = document.getElementById('notificationBadge');
            if (data.count > 0) {
                badge.textContent = data.count > 99 ? '99+' : data.count;
                badge.style.display = 'block';
            } else {
                badge.style.display = 'none';
            }
        } catch (error) {
            console.error('Error loading unread count:', error);
        }
    }

    async function markNotificationRead(notificationId) {
        try {
            await fetch(`/api/notifications/${notificationId}/read`, { method: 'POST' });
            loadNotifications();
            loadUnreadCount();
        } catch (error) {
            console.error('Error marking notification as read:', error);
        }
    }

    async function markAllRead() {
        try {
            await fetch('/api/notifications/read-all', { method: 'POST' });
            loadNotifications();
            loadUnreadCount();
        } catch (error) {
            console.error('Error marking all as read:', error);
        }
    }
    </script>
    
    <script src="~/js/site.js" asp-append-version="true"></script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>